generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Token {
  id                String  @id @default(cuid())
  token             String  @unique
  createdAt         DateTime  @default(now())
  expiresAt         DateTime
  userId            String
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Alternatif {
  id                String  @id @default(cuid())
  nama              String
  createdAt         DateTime     @default(now())
  Penilaians        Penilaian[]
}

model DetailKriteria {
  id                String  @id @default(cuid())
  id_kriteria       String
  deskripsi         String
  nilai             Int
  createdAt         DateTime    @default(now())
  Kriteria          Kriteria    @relation(fields: [id_kriteria], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Penilaians        Penilaian[]
}



model Kriteria {
  id                String          @id @default(cuid())
  nama              String
  bobot             Float
  tipe              Tipe
  DetailKriterias   DetailKriteria[]
  Penilaian         Penilaian[]
}

enum Tipe {
  COST
  BENEFIT
}



model Penilaian {
  id                String  @id @default(cuid())
  id_detail_kriteria  String
  id_kriteria         String
  id_alternatif       String
  Alternatif          Alternatif      @relation(fields: [id_alternatif], references: [id], onDelete: Cascade, onUpdate: Cascade)
  DetailKriteria      DetailKriteria  @relation(fields: [id_detail_kriteria], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Kriteria            Kriteria        @relation(fields: [id_kriteria], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id        String  @id @default(cuid())
  name      String?
  password  String
  email     String   @unique
  image     String?
  createdAt DateTime  @default(now())
  Token     Token[]
}
model Result {
  id        String  @id @default(cuid())
  normalizedMatrix         Json
  weightedNormalizedMatrix Json
  idealSolution            Json
  negativeIdealSolution    Json
  distancesToIdeal         Json
  distancesToNegativeIdeal Json
  PerformanceScores        PerformanceScore[]
}

model PerformanceScore {
  id          String  @id @default(cuid())
  score       Float
  alternative Json
  resultId    String
  result      Result   @relation(fields: [resultId], references: [id],  onDelete: Cascade, onUpdate: Cascade)
}